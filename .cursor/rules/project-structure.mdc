---
description: Structure and key aspects of project
globs:
alwaysApply: true
---

# json-storage Project Structure & Workflow

## Project Overview
json-storage is a node.js application written in typescript, transpiled to ESM modules javascript, and exposed as NPM package. It is published under scoped name `@bartek01001/json-storage`. Application is a service to manage json files on computes's hard drive. This app can create, read, update and delete json files. 
- Package: `@bartek01001/json-storage` — lightweight file-based JSON storage in TypeScript for Node.js.
- Features: CRUD, advanced filtering (MongoDB-like), file locking, TypeScript & ESM support.

## Brief of project structure
- `src/`: source code (`JSONStorage.ts`, type definitions)
- `tests/`: test suites (CRUD, filtering)
- `dist/`: transpiled JS + type defs. We don't code here, because this is ts output. This dir can be missing anytime!
- `index.ts`: main export
- Configs: `package.json`, `tsconfig.json`, `tsconfig.build.json`, `vitest.config.ts`
- Docs: `docs/DEVELOPMENT.md`, `README.md`, `.cursor/rules`

## Project Structure - full map
```bash
json-storage/
├── src/
│   ├── JSONStorage.ts         # Main class implementation
│   └── JSONStorage.types.ts   # TypeScript type definitions
├── tests/
│   ├── JSONStorge.test.ts     # CRUD operations test suite
│   └── JSONStorage.filter.test.ts # Advanced filtering test suite
├── docs/
│   └── DEVELOPMENT.md         # Instructions for developers and Ai
├── dist/                      # Transpiled JavaScript + type definitions. We don't code here!
├── index.ts                   # Main export file
├── package.json               # NPM package configuration
├── tsconfig.json              # TypeScript config (development + tests)
├── tsconfig.build.json        # TypeScript config (production build)
├── vitest.config.ts           # Vitest test configuration
└── README.md                  # Classic readme and user documentation
```

## Technologies, tools and stack
- `node.js` - Always the newest LTS - for coding and for transpiled (emmited) code
- `ESM modules` - project supporst ESM imports/exports, does not care about cjs "require". Cjs module-style may work, or may not.
- `fs/promises` - Asynchronous operations on filesystem
- `@bartek01001/async-tasks-queue` - Package to prevent concurrent directory connections
- `typescript` - For coding, with ESM support. Typescript emmits output files (using tsconfig.build.json). No other bundlers used.
- `javascript` - Transpiled code, also with ESM support. Code is transpiled through tsconfig.build.json (no other bundlers used)
- `npm` - package manager for project and publishing this project as package
- `vitest` - for testing emmited code locally
- `git`
- `cursor` - Ai-boosted code editor to help coding

## Import & Build System
- `package.json` import maps: `#src/` → `dist/src/` (for consumers)
- `tsconfig.json`: path aliases `#src/*` → `src/*` (dev & compilation)
- `vitest.config.ts`: maps `#src` → `dist/src` (tests run on compiled code)
- Build process:
  1. Compile `src/` → `dist/src/`
  2. Run tests on `dist/src/`
  3. Publish compiled code only

## Development Workflow
- Use `npm run dev` to run tests in watch mode
- Use `npm test` for one-off tests
- Use `npm run build` to compile TypeScript to `dist/`
- After any code change: build → test
- Tests verify CRUD, filtering, concurrency, and type safety on compiled code

## Code Contribution Guidelines
- Implementation in `src/JSONStorage.ts`
- Types in `src/JSONStorage.types.ts`
- Tests in `tests/` folder (CRUD and filtering)
- Add new features with corresponding tests and type updates
- Fix bugs by adding tests reproducing the issue
- Follow strict TypeScript typing and error handling
- Ensure no code comments except for essential workarounds

## Important Notes for Cursor
- Always ensure to build before running tests (tests use compiled JS)
- Respect file locking mechanism for concurrency safety
- Use only official docs and proven knowledge sources
- Keep backward compatibility in mind
- Package is ESM only, no CommonJS


