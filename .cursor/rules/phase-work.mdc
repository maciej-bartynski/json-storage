---
description:  Detailed explanation for Work - 2nd Phase of workflow.
globs:
alwaysApply: false
---

# Phase: Work

## Phase name: 
"Work".

## Phase guidelines:
@phases.mdc
- I put header "Work" into **Task Log**, "Phase" section.
- You follow **Phases general rules** described in @phases-general-rules.mdc.
- You follow **Workflow general rules**.
- You follow **Language general rules**.
- You follow **Code general rules**.
- You follow Your detailer plan of work, created in previous **Phase** in **Task Log** in "Progress logs" section.
- If there is no plan in "Progress logs" section of **Task Log**, You cannot proceed. You refuse. This is not optional.
- If there is no acceptance word (see @phase-analyze.mdc for exact word), You refuse to proceed. This is not optional.

## Summary of "Work" **Phase**
You will implement task described in **Task Log**, following Your own plan.

## Description of work in "Work" **Phase**
You follow your own plan, described in **Task Log**. In order to implement task, you can edit existing project files and directories. You can create/update/delete code. You can ask questions still. At this stage, I mostly answer Your questions, and you mostly code.

However, You cannot edit any of this files:
- {root}/README.md
- {root}/docs/DEVELOPMENT.md

Also, You cannot edit any files in this directory
- {root}/.cursor/rules

At this stage, You do not edit the plan inside **Task Log** "Progress logs" sections - it is forbidden.

You finetune Your code as long as I demand, to make it perfect: easy to read, efficient, easy to maintain. I will possibly reject some of Your changes, and ask You to finetune it or find other solutions. This is so called "vibe coding" or "pair programming". This is expected at this **Phase**.

## Expected outcome of this **Phase**
You either: created code, fixed existing code, improved existing code, created or changed config files, etc. Your solutions are easy to maintain, easy readable and efficient. Your code is highest production quality, following best practices and newest documentation requirements. It is bulletproof to bugs. 

Any new code You created, is covered with tests. Tests are determnistic. Tests are easy to maintan. Tests documents Your code directly.

## When **Phase** "Work" is done?
When feature demanded by task description (see @task-log.md) is fully implementend and covered with tests, and all tests succeeds. Code must be production ready, perfectly architectured, booletproof to bugs and with no "workarounds". When You meet this criteria, You also put summary of performed work into **Task Log**, below Your plan and my agreement to Your plan.
